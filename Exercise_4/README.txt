In this exercise the goal is to create the repository layer for every business object.
The focus of this exercise is to understand repositories and connect our application to our database.
There are multiple necessary steps needed for this exercise, we need to remove the static data and also need to properly annotate the 
business objects so that hibernate can manage these entities for us.
After this exercise the three layers should work in harmony and we should be able to permanently persist data.
Note that this exercise is a bit unique, as we don't necessarily have to write any logic in the repository files, since spring boot
can generate SQL queries for us.
Now we can see that we named the method findBy because of the queries from the repository.
As usual, in this project there are three examples with already built repositories and adjusted logic: Role, authority and user.

This example lacks @OneToMany and @ManyToOne relations, for examples go here: shorturl.at/bgzY4
If there are more questions proceed to follow this link: shorturl.at/floRS

Short description of the exercise:
1. Create the the repository files for all business objects
2. Add necessary annotations to the business objects
3. Delete the static data sources
4. Adjust the logic in the service layer to now access the database

Additional exercises:
1. Consider logic which could be needed outside of CRUD (for example getting all bids for an auction, sorted by value)
2. Implement the endpoint, service logic and potentially a unique repository query

In case you want your database to be generated by your business objects:
- Go to your "applications.properties"
- change "spring.jpa.hibernate.ddl-auto=validate" to "spring.jpa.hibernate.ddl-auto=update"